// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ilet.server.Context;

#nullable disable

namespace ilet.server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250629120731_AddIsWorldVisibleColumn")]
    partial class AddIsWorldVisibleColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ilet.server.Models.UserProfilePictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('userprofilepictures_id_seq'::regclass)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("userprofilepictures_pkey");

                    b.HasIndex(new[] { "UserId" }, "uq_user_profile_pictures_user_id")
                        .IsUnique();

                    b.ToTable("user_profile_pictures", (string)null);
                });

            modelBuilder.Entity("ilet.server.Models.Userfriendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Addresseeid")
                        .HasColumnType("integer")
                        .HasColumnName("addresseeid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Requesterid")
                        .HasColumnType("integer")
                        .HasColumnName("requesterid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("userfriendships_pkey");

                    b.HasIndex("Addresseeid");

                    b.HasIndex("Requesterid");

                    b.ToTable("userfriendships", (string)null);
                });

            modelBuilder.Entity("ilet.server.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsWorldVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("isworldvisible");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ilet.server.Models.UserProfilePictures", b =>
                {
                    b.HasOne("ilet.server.Models.Users", "User")
                        .WithOne("UserProfilePictures")
                        .HasForeignKey("ilet.server.Models.UserProfilePictures", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_pictures_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ilet.server.Models.Userfriendship", b =>
                {
                    b.HasOne("ilet.server.Models.Users", "Addressee")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("Addresseeid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ilet.server.Models.Users", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("Requesterid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ilet.server.Models.Users", b =>
                {
                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("UserProfilePictures");
                });
#pragma warning restore 612, 618
        }
    }
}
